# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetComputeV1alpha1InstanceResult',
    'AwaitableGetComputeV1alpha1InstanceResult',
    'get_compute_v1alpha1_instance',
    'get_compute_v1alpha1_instance_output',
]

@pulumi.output_type
class GetComputeV1alpha1InstanceResult:
    """
    A collection of values returned by getComputeV1alpha1Instance.
    """
    def __init__(__self__, boot_disk=None, cloud_init_user_data=None, created_at=None, filesystems=None, gpu_cluster=None, id=None, labels=None, metadata=None, name=None, network_interfaces=None, parent_id=None, recovery_policy=None, resource_version=None, resources=None, secondary_disks=None, service_account_id=None, status=None, stopped=None, updated_at=None):
        if boot_disk and not isinstance(boot_disk, dict):
            raise TypeError("Expected argument 'boot_disk' to be a dict")
        pulumi.set(__self__, "boot_disk", boot_disk)
        if cloud_init_user_data and not isinstance(cloud_init_user_data, str):
            raise TypeError("Expected argument 'cloud_init_user_data' to be a str")
        pulumi.set(__self__, "cloud_init_user_data", cloud_init_user_data)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if filesystems and not isinstance(filesystems, list):
            raise TypeError("Expected argument 'filesystems' to be a list")
        pulumi.set(__self__, "filesystems", filesystems)
        if gpu_cluster and not isinstance(gpu_cluster, dict):
            raise TypeError("Expected argument 'gpu_cluster' to be a dict")
        pulumi.set(__self__, "gpu_cluster", gpu_cluster)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if recovery_policy and not isinstance(recovery_policy, str):
            raise TypeError("Expected argument 'recovery_policy' to be a str")
        pulumi.set(__self__, "recovery_policy", recovery_policy)
        if resource_version and not isinstance(resource_version, float):
            raise TypeError("Expected argument 'resource_version' to be a float")
        pulumi.set(__self__, "resource_version", resource_version)
        if resources and not isinstance(resources, dict):
            raise TypeError("Expected argument 'resources' to be a dict")
        pulumi.set(__self__, "resources", resources)
        if secondary_disks and not isinstance(secondary_disks, list):
            raise TypeError("Expected argument 'secondary_disks' to be a list")
        pulumi.set(__self__, "secondary_disks", secondary_disks)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if stopped and not isinstance(stopped, bool):
            raise TypeError("Expected argument 'stopped' to be a bool")
        pulumi.set(__self__, "stopped", stopped)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> 'outputs.GetComputeV1alpha1InstanceBootDiskResult':
        return pulumi.get(self, "boot_disk")

    @_builtins.property
    @pulumi.getter(name="cloudInitUserData")
    def cloud_init_user_data(self) -> _builtins.str:
        return pulumi.get(self, "cloud_init_user_data")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def filesystems(self) -> Sequence['outputs.GetComputeV1alpha1InstanceFilesystemResult']:
        return pulumi.get(self, "filesystems")

    @_builtins.property
    @pulumi.getter(name="gpuCluster")
    def gpu_cluster(self) -> 'outputs.GetComputeV1alpha1InstanceGpuClusterResult':
        return pulumi.get(self, "gpu_cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetComputeV1alpha1InstanceMetadataResult':
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetComputeV1alpha1InstanceNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="recoveryPolicy")
    def recovery_policy(self) -> _builtins.str:
        return pulumi.get(self, "recovery_policy")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.float:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> 'outputs.GetComputeV1alpha1InstanceResourcesResult':
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="secondaryDisks")
    def secondary_disks(self) -> Sequence['outputs.GetComputeV1alpha1InstanceSecondaryDiskResult']:
        return pulumi.get(self, "secondary_disks")

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> _builtins.str:
        return pulumi.get(self, "service_account_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetComputeV1alpha1InstanceStatusResult':
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def stopped(self) -> _builtins.bool:
        return pulumi.get(self, "stopped")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetComputeV1alpha1InstanceResult(GetComputeV1alpha1InstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeV1alpha1InstanceResult(
            boot_disk=self.boot_disk,
            cloud_init_user_data=self.cloud_init_user_data,
            created_at=self.created_at,
            filesystems=self.filesystems,
            gpu_cluster=self.gpu_cluster,
            id=self.id,
            labels=self.labels,
            metadata=self.metadata,
            name=self.name,
            network_interfaces=self.network_interfaces,
            parent_id=self.parent_id,
            recovery_policy=self.recovery_policy,
            resource_version=self.resource_version,
            resources=self.resources,
            secondary_disks=self.secondary_disks,
            service_account_id=self.service_account_id,
            status=self.status,
            stopped=self.stopped,
            updated_at=self.updated_at)


def get_compute_v1alpha1_instance(id: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  parent_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeV1alpha1InstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['parentId'] = parent_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nebius:index/getComputeV1alpha1Instance:getComputeV1alpha1Instance', __args__, opts=opts, typ=GetComputeV1alpha1InstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeV1alpha1InstanceResult(
        boot_disk=pulumi.get(__ret__, 'boot_disk'),
        cloud_init_user_data=pulumi.get(__ret__, 'cloud_init_user_data'),
        created_at=pulumi.get(__ret__, 'created_at'),
        filesystems=pulumi.get(__ret__, 'filesystems'),
        gpu_cluster=pulumi.get(__ret__, 'gpu_cluster'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        recovery_policy=pulumi.get(__ret__, 'recovery_policy'),
        resource_version=pulumi.get(__ret__, 'resource_version'),
        resources=pulumi.get(__ret__, 'resources'),
        secondary_disks=pulumi.get(__ret__, 'secondary_disks'),
        service_account_id=pulumi.get(__ret__, 'service_account_id'),
        status=pulumi.get(__ret__, 'status'),
        stopped=pulumi.get(__ret__, 'stopped'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_compute_v1alpha1_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         parent_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeV1alpha1InstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['parentId'] = parent_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nebius:index/getComputeV1alpha1Instance:getComputeV1alpha1Instance', __args__, opts=opts, typ=GetComputeV1alpha1InstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeV1alpha1InstanceResult(
        boot_disk=pulumi.get(__response__, 'boot_disk'),
        cloud_init_user_data=pulumi.get(__response__, 'cloud_init_user_data'),
        created_at=pulumi.get(__response__, 'created_at'),
        filesystems=pulumi.get(__response__, 'filesystems'),
        gpu_cluster=pulumi.get(__response__, 'gpu_cluster'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        network_interfaces=pulumi.get(__response__, 'network_interfaces'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        recovery_policy=pulumi.get(__response__, 'recovery_policy'),
        resource_version=pulumi.get(__response__, 'resource_version'),
        resources=pulumi.get(__response__, 'resources'),
        secondary_disks=pulumi.get(__response__, 'secondary_disks'),
        service_account_id=pulumi.get(__response__, 'service_account_id'),
        status=pulumi.get(__response__, 'status'),
        stopped=pulumi.get(__response__, 'stopped'),
        updated_at=pulumi.get(__response__, 'updated_at')))
