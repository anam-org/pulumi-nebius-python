# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationsV1alpha1K8sReleaseArgs', 'ApplicationsV1alpha1K8sRelease']

@pulumi.input_type
class ApplicationsV1alpha1K8sReleaseArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[builtins.str],
                 cluster_id: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 parent_id: pulumi.Input[builtins.str],
                 product_slug: pulumi.Input[builtins.str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 values: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ApplicationsV1alpha1K8sRelease resource.
        :param pulumi.Input[builtins.str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels associated with the resource.
        :param pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[builtins.str] name: Human readable name for the resource.
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "product_slug", product_slug)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if set is not None:
            pulumi.set(__self__, "set", set)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="productSlug")
    def product_slug(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "product_slug")

    @product_slug.setter
    def product_slug(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "product_slug", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "set", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class _ApplicationsV1alpha1K8sReleaseState:
    def __init__(__self__, *,
                 application_name: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[builtins.str]] = None,
                 product_slug: Optional[pulumi.Input[builtins.str]] = None,
                 resource_version: Optional[pulumi.Input[builtins.float]] = None,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 status: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseStatusArgs']] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApplicationsV1alpha1K8sRelease resources.
        :param pulumi.Input[builtins.str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels associated with the resource.
        :param pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[builtins.str] name: Human readable name for the resource.
        :param pulumi.Input[builtins.str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[builtins.float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[builtins.str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if product_slug is not None:
            pulumi.set(__self__, "product_slug", product_slug)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if set is not None:
            pulumi.set(__self__, "set", set)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="productSlug")
    def product_slug(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "product_slug")

    @product_slug.setter
    def product_slug(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "product_slug", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "set", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseStatusArgs']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['ApplicationsV1alpha1K8sReleaseStatusArgs']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "values", value)


@pulumi.type_token("nebius:index/applicationsV1alpha1K8sRelease:ApplicationsV1alpha1K8sRelease")
class ApplicationsV1alpha1K8sRelease(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_name: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseMetadataArgs', 'ApplicationsV1alpha1K8sReleaseMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[builtins.str]] = None,
                 product_slug: Optional[pulumi.Input[builtins.str]] = None,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 values: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ApplicationsV1alpha1K8sRelease resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseMetadataArgs', 'ApplicationsV1alpha1K8sReleaseMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[builtins.str] name: Human readable name for the resource.
        :param pulumi.Input[builtins.str] parent_id: Identifier of the parent resource to which the resource belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationsV1alpha1K8sReleaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApplicationsV1alpha1K8sRelease resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApplicationsV1alpha1K8sReleaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationsV1alpha1K8sReleaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_name: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseMetadataArgs', 'ApplicationsV1alpha1K8sReleaseMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 parent_id: Optional[pulumi.Input[builtins.str]] = None,
                 product_slug: Optional[pulumi.Input[builtins.str]] = None,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 values: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationsV1alpha1K8sReleaseArgs.__new__(ApplicationsV1alpha1K8sReleaseArgs)

            if application_name is None and not opts.urn:
                raise TypeError("Missing required property 'application_name'")
            __props__.__dict__["application_name"] = application_name
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if parent_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_id'")
            __props__.__dict__["parent_id"] = parent_id
            if product_slug is None and not opts.urn:
                raise TypeError("Missing required property 'product_slug'")
            __props__.__dict__["product_slug"] = product_slug
            __props__.__dict__["set"] = None if set is None else pulumi.Output.secret(set)
            __props__.__dict__["values"] = None if values is None else pulumi.Output.secret(values)
            __props__.__dict__["created_at"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["set", "values"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ApplicationsV1alpha1K8sRelease, __self__).__init__(
            'nebius:index/applicationsV1alpha1K8sRelease:ApplicationsV1alpha1K8sRelease',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_name: Optional[pulumi.Input[builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            metadata: Optional[pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseMetadataArgs', 'ApplicationsV1alpha1K8sReleaseMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            parent_id: Optional[pulumi.Input[builtins.str]] = None,
            product_slug: Optional[pulumi.Input[builtins.str]] = None,
            resource_version: Optional[pulumi.Input[builtins.float]] = None,
            set: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            status: Optional[pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseStatusArgs', 'ApplicationsV1alpha1K8sReleaseStatusArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None,
            values: Optional[pulumi.Input[builtins.str]] = None) -> 'ApplicationsV1alpha1K8sRelease':
        """
        Get an existing ApplicationsV1alpha1K8sRelease resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['ApplicationsV1alpha1K8sReleaseMetadataArgs', 'ApplicationsV1alpha1K8sReleaseMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[builtins.str] name: Human readable name for the resource.
        :param pulumi.Input[builtins.str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[builtins.float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[builtins.str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationsV1alpha1K8sReleaseState.__new__(_ApplicationsV1alpha1K8sReleaseState)

        __props__.__dict__["application_name"] = application_name
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["labels"] = labels
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["product_slug"] = product_slug
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["set"] = set
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["values"] = values
        return ApplicationsV1alpha1K8sRelease(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ApplicationsV1alpha1K8sReleaseMetadata']:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[builtins.str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="productSlug")
    def product_slug(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "product_slug")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[builtins.float]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def set(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "set")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.ApplicationsV1alpha1K8sReleaseStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "values")

