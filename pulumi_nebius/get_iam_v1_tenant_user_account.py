# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamV1TenantUserAccountResult',
    'AwaitableGetIamV1TenantUserAccountResult',
    'get_iam_v1_tenant_user_account',
    'get_iam_v1_tenant_user_account_output',
]

@pulumi.output_type
class GetIamV1TenantUserAccountResult:
    """
    A collection of values returned by getIamV1TenantUserAccount.
    """
    def __init__(__self__, created_at=None, id=None, labels=None, metadata=None, name=None, parent_id=None, resource_version=None, status=None, updated_at=None, visible_attributes=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if resource_version and not isinstance(resource_version, float):
            raise TypeError("Expected argument 'resource_version' to be a float")
        pulumi.set(__self__, "resource_version", resource_version)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if visible_attributes and not isinstance(visible_attributes, dict):
            raise TypeError("Expected argument 'visible_attributes' to be a dict")
        pulumi.set(__self__, "visible_attributes", visible_attributes)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetIamV1TenantUserAccountMetadataResult':
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.float:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetIamV1TenantUserAccountStatusResult':
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="visibleAttributes")
    def visible_attributes(self) -> 'outputs.GetIamV1TenantUserAccountVisibleAttributesResult':
        return pulumi.get(self, "visible_attributes")


class AwaitableGetIamV1TenantUserAccountResult(GetIamV1TenantUserAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamV1TenantUserAccountResult(
            created_at=self.created_at,
            id=self.id,
            labels=self.labels,
            metadata=self.metadata,
            name=self.name,
            parent_id=self.parent_id,
            resource_version=self.resource_version,
            status=self.status,
            updated_at=self.updated_at,
            visible_attributes=self.visible_attributes)


def get_iam_v1_tenant_user_account(id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamV1TenantUserAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nebius:index/getIamV1TenantUserAccount:getIamV1TenantUserAccount', __args__, opts=opts, typ=GetIamV1TenantUserAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamV1TenantUserAccountResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        resource_version=pulumi.get(__ret__, 'resource_version'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        visible_attributes=pulumi.get(__ret__, 'visible_attributes'))
def get_iam_v1_tenant_user_account_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamV1TenantUserAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nebius:index/getIamV1TenantUserAccount:getIamV1TenantUserAccount', __args__, opts=opts, typ=GetIamV1TenantUserAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamV1TenantUserAccountResult(
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        resource_version=pulumi.get(__response__, 'resource_version'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        visible_attributes=pulumi.get(__response__, 'visible_attributes')))
