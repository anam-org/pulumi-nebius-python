# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 address_options: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProviderAddressOptionsArgs']]]] = None,
                 address_template: Optional[pulumi.Input['ProviderAddressTemplateArgs']] = None,
                 address_template_env: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_env: Optional[pulumi.Input[_builtins.str]] = None,
                 module_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input['ProviderProfileArgs']] = None,
                 resolvers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resolvers_env: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input['ProviderServiceAccountArgs']] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 versioned_ephemeral_values: Optional[Any] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['ProviderAddressOptionsArgs']]] address_options: Set specific options for each address. Use "\\*" to set them for all addresses at once. Empty options will result in
               default TLS connection for this address, thus overriding "\\*".
        :param pulumi.Input['ProviderAddressTemplateArgs'] address_template: address template (overrides address_template_env)
        :param pulumi.Input[_builtins.str] address_template_env: env variable name to obtain address template in form of `FIND=REPLACE`
        :param pulumi.Input[_builtins.str] domain: custom domain name (overrides domain_env)
        :param pulumi.Input[_builtins.str] domain_env: env variable name to obtain custom domain name
        :param pulumi.Input[_builtins.str] module_name: it is suggested to set this value to your module name if the provider is initialized in one, does not affect any
               behaviors
        :param pulumi.Input[_builtins.bool] no_credentials: do not authenticate
        :param pulumi.Input[_builtins.str] parent_id: Parent ID if it is not read from the profile, or if you want to overwrite it.
        :param pulumi.Input['ProviderProfileArgs'] profile: Reads profile from the CLI config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] resolvers: resolver map of type `[pattern|service_id]->address`
        :param pulumi.Input[_builtins.str] resolvers_env: env variable name that holds resolver map (may be set alongside resolvers)
        :param pulumi.Input['ProviderServiceAccountArgs'] service_account: sets service account credentials (is overridden by token)
        :param pulumi.Input[_builtins.str] token: authenticate using this IAM token
        :param Any versioned_ephemeral_values: A map of all ephemeral values that will be passed to nebius.Hash for hashing
        """
        if address_options is not None:
            pulumi.set(__self__, "address_options", address_options)
        if address_template is not None:
            pulumi.set(__self__, "address_template", address_template)
        if address_template_env is not None:
            pulumi.set(__self__, "address_template_env", address_template_env)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_env is not None:
            pulumi.set(__self__, "domain_env", domain_env)
        if module_name is not None:
            pulumi.set(__self__, "module_name", module_name)
        if no_credentials is not None:
            pulumi.set(__self__, "no_credentials", no_credentials)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if resolvers is not None:
            pulumi.set(__self__, "resolvers", resolvers)
        if resolvers_env is not None:
            pulumi.set(__self__, "resolvers_env", resolvers_env)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if versioned_ephemeral_values is not None:
            pulumi.set(__self__, "versioned_ephemeral_values", versioned_ephemeral_values)

    @_builtins.property
    @pulumi.getter(name="addressOptions")
    def address_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ProviderAddressOptionsArgs']]]]:
        """
        Set specific options for each address. Use "\\*" to set them for all addresses at once. Empty options will result in
        default TLS connection for this address, thus overriding "\\*".
        """
        return pulumi.get(self, "address_options")

    @address_options.setter
    def address_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProviderAddressOptionsArgs']]]]):
        pulumi.set(self, "address_options", value)

    @_builtins.property
    @pulumi.getter(name="addressTemplate")
    def address_template(self) -> Optional[pulumi.Input['ProviderAddressTemplateArgs']]:
        """
        address template (overrides address_template_env)
        """
        return pulumi.get(self, "address_template")

    @address_template.setter
    def address_template(self, value: Optional[pulumi.Input['ProviderAddressTemplateArgs']]):
        pulumi.set(self, "address_template", value)

    @_builtins.property
    @pulumi.getter(name="addressTemplateEnv")
    def address_template_env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        env variable name to obtain address template in form of `FIND=REPLACE`
        """
        return pulumi.get(self, "address_template_env")

    @address_template_env.setter
    def address_template_env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_template_env", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        custom domain name (overrides domain_env)
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="domainEnv")
    def domain_env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        env variable name to obtain custom domain name
        """
        return pulumi.get(self, "domain_env")

    @domain_env.setter
    def domain_env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_env", value)

    @_builtins.property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        it is suggested to set this value to your module name if the provider is initialized in one, does not affect any
        behaviors
        """
        return pulumi.get(self, "module_name")

    @module_name.setter
    def module_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "module_name", value)

    @_builtins.property
    @pulumi.getter(name="noCredentials")
    def no_credentials(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        do not authenticate
        """
        return pulumi.get(self, "no_credentials")

    @no_credentials.setter
    def no_credentials(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_credentials", value)

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parent ID if it is not read from the profile, or if you want to overwrite it.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_id", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input['ProviderProfileArgs']]:
        """
        Reads profile from the CLI config.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input['ProviderProfileArgs']]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def resolvers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        resolver map of type `[pattern|service_id]->address`
        """
        return pulumi.get(self, "resolvers")

    @resolvers.setter
    def resolvers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resolvers", value)

    @_builtins.property
    @pulumi.getter(name="resolversEnv")
    def resolvers_env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        env variable name that holds resolver map (may be set alongside resolvers)
        """
        return pulumi.get(self, "resolvers_env")

    @resolvers_env.setter
    def resolvers_env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resolvers_env", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['ProviderServiceAccountArgs']]:
        """
        sets service account credentials (is overridden by token)
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['ProviderServiceAccountArgs']]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        authenticate using this IAM token
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter(name="versionedEphemeralValues")
    def versioned_ephemeral_values(self) -> Optional[Any]:
        """
        A map of all ephemeral values that will be passed to nebius.Hash for hashing
        """
        return pulumi.get(self, "versioned_ephemeral_values")

    @versioned_ephemeral_values.setter
    def versioned_ephemeral_values(self, value: Optional[Any]):
        pulumi.set(self, "versioned_ephemeral_values", value)


@pulumi.type_token("pulumi:providers:nebius")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ProviderAddressOptionsArgs', 'ProviderAddressOptionsArgsDict']]]]] = None,
                 address_template: Optional[pulumi.Input[Union['ProviderAddressTemplateArgs', 'ProviderAddressTemplateArgsDict']]] = None,
                 address_template_env: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_env: Optional[pulumi.Input[_builtins.str]] = None,
                 module_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[Union['ProviderProfileArgs', 'ProviderProfileArgsDict']]] = None,
                 resolvers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resolvers_env: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[Union['ProviderServiceAccountArgs', 'ProviderServiceAccountArgsDict']]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 versioned_ephemeral_values: Optional[Any] = None,
                 __props__=None):
        """
        The provider type for the nebius package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['ProviderAddressOptionsArgs', 'ProviderAddressOptionsArgsDict']]]] address_options: Set specific options for each address. Use "\\*" to set them for all addresses at once. Empty options will result in
               default TLS connection for this address, thus overriding "\\*".
        :param pulumi.Input[Union['ProviderAddressTemplateArgs', 'ProviderAddressTemplateArgsDict']] address_template: address template (overrides address_template_env)
        :param pulumi.Input[_builtins.str] address_template_env: env variable name to obtain address template in form of `FIND=REPLACE`
        :param pulumi.Input[_builtins.str] domain: custom domain name (overrides domain_env)
        :param pulumi.Input[_builtins.str] domain_env: env variable name to obtain custom domain name
        :param pulumi.Input[_builtins.str] module_name: it is suggested to set this value to your module name if the provider is initialized in one, does not affect any
               behaviors
        :param pulumi.Input[_builtins.bool] no_credentials: do not authenticate
        :param pulumi.Input[_builtins.str] parent_id: Parent ID if it is not read from the profile, or if you want to overwrite it.
        :param pulumi.Input[Union['ProviderProfileArgs', 'ProviderProfileArgsDict']] profile: Reads profile from the CLI config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] resolvers: resolver map of type `[pattern|service_id]->address`
        :param pulumi.Input[_builtins.str] resolvers_env: env variable name that holds resolver map (may be set alongside resolvers)
        :param pulumi.Input[Union['ProviderServiceAccountArgs', 'ProviderServiceAccountArgsDict']] service_account: sets service account credentials (is overridden by token)
        :param pulumi.Input[_builtins.str] token: authenticate using this IAM token
        :param Any versioned_ephemeral_values: A map of all ephemeral values that will be passed to nebius.Hash for hashing
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the nebius package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ProviderAddressOptionsArgs', 'ProviderAddressOptionsArgsDict']]]]] = None,
                 address_template: Optional[pulumi.Input[Union['ProviderAddressTemplateArgs', 'ProviderAddressTemplateArgsDict']]] = None,
                 address_template_env: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_env: Optional[pulumi.Input[_builtins.str]] = None,
                 module_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 parent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[Union['ProviderProfileArgs', 'ProviderProfileArgsDict']]] = None,
                 resolvers: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resolvers_env: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account: Optional[pulumi.Input[Union['ProviderServiceAccountArgs', 'ProviderServiceAccountArgsDict']]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 versioned_ephemeral_values: Optional[Any] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["address_options"] = pulumi.Output.from_input(address_options).apply(pulumi.runtime.to_json) if address_options is not None else None
            __props__.__dict__["address_template"] = pulumi.Output.from_input(address_template).apply(pulumi.runtime.to_json) if address_template is not None else None
            __props__.__dict__["address_template_env"] = address_template_env
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domain_env"] = domain_env
            __props__.__dict__["module_name"] = module_name
            __props__.__dict__["no_credentials"] = pulumi.Output.from_input(no_credentials).apply(pulumi.runtime.to_json) if no_credentials is not None else None
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["profile"] = pulumi.Output.from_input(profile).apply(pulumi.runtime.to_json) if profile is not None else None
            __props__.__dict__["resolvers"] = pulumi.Output.from_input(resolvers).apply(pulumi.runtime.to_json) if resolvers is not None else None
            __props__.__dict__["resolvers_env"] = resolvers_env
            __props__.__dict__["service_account"] = pulumi.Output.from_input(service_account).apply(pulumi.runtime.to_json) if service_account is not None else None
            __props__.__dict__["token"] = token
            __props__.__dict__["versioned_ephemeral_values"] = pulumi.Output.secret(versioned_ephemeral_values).apply(pulumi.runtime.to_json) if versioned_ephemeral_values is not None else None
        super(Provider, __self__).__init__(
            'nebius',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @_builtins.property
    @pulumi.getter(name="addressTemplateEnv")
    def address_template_env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        env variable name to obtain address template in form of `FIND=REPLACE`
        """
        return pulumi.get(self, "address_template_env")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        custom domain name (overrides domain_env)
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="domainEnv")
    def domain_env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        env variable name to obtain custom domain name
        """
        return pulumi.get(self, "domain_env")

    @_builtins.property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        it is suggested to set this value to your module name if the provider is initialized in one, does not affect any
        behaviors
        """
        return pulumi.get(self, "module_name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Parent ID if it is not read from the profile, or if you want to overwrite it.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="resolversEnv")
    def resolvers_env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        env variable name that holds resolver map (may be set alongside resolvers)
        """
        return pulumi.get(self, "resolvers_env")

    @_builtins.property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        authenticate using this IAM token
        """
        return pulumi.get(self, "token")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:nebius/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult, package_ref=_utilities.get_package())

