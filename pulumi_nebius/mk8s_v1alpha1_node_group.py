# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Mk8sV1alpha1NodeGroupArgs', 'Mk8sV1alpha1NodeGroup']

@pulumi.input_type
class Mk8sV1alpha1NodeGroupArgs:
    def __init__(__self__, *,
                 parent_id: pulumi.Input[str],
                 template: pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs'],
                 autoscaling: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']] = None,
                 fixed_node_count: Optional[pulumi.Input[float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Mk8sV1alpha1NodeGroup resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs'] autoscaling: *Cannot be set alongside fixed_node_count.*
        :param pulumi.Input[float] fixed_node_count: number of nodes in the group *Cannot be set alongside autoscaling.*
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs'] metadata: ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] version: Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
               Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
               used.
        """
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "template", template)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if fixed_node_count is not None:
            pulumi.set(__self__, "fixed_node_count", fixed_node_count)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Input[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs']:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs']):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']]:
        """
        *Cannot be set alongside fixed_node_count.*
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="fixedNodeCount")
    def fixed_node_count(self) -> Optional[pulumi.Input[float]]:
        """
        number of nodes in the group *Cannot be set alongside autoscaling.*
        """
        return pulumi.get(self, "fixed_node_count")

    @fixed_node_count.setter
    def fixed_node_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "fixed_node_count", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']]:
        """
        ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
        Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
        used.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _Mk8sV1alpha1NodeGroupState:
    def __init__(__self__, *,
                 autoscaling: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 fixed_node_count: Optional[pulumi.Input[float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStatusArgs']] = None,
                 strategy: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']] = None,
                 template: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs']] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Mk8sV1alpha1NodeGroup resources.
        :param pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs'] autoscaling: *Cannot be set alongside fixed_node_count.*
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[float] fixed_node_count: number of nodes in the group *Cannot be set alongside autoscaling.*
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs'] metadata: ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[str] version: Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
               Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
               used.
        """
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if fixed_node_count is not None:
            pulumi.set(__self__, "fixed_node_count", fixed_node_count)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']]:
        """
        *Cannot be set alongside fixed_node_count.*
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="fixedNodeCount")
    def fixed_node_count(self) -> Optional[pulumi.Input[float]]:
        """
        number of nodes in the group *Cannot be set alongside autoscaling.*
        """
        return pulumi.get(self, "fixed_node_count")

    @fixed_node_count.setter
    def fixed_node_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "fixed_node_count", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']]:
        """
        ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[float]]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStatusArgs']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStatusArgs']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs']]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['Mk8sV1alpha1NodeGroupTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
        Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
        used.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Mk8sV1alpha1NodeGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autoscaling: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupAutoscalingArgs', 'Mk8sV1alpha1NodeGroupAutoscalingArgsDict']]] = None,
                 fixed_node_count: Optional[pulumi.Input[float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupMetadataArgs', 'Mk8sV1alpha1NodeGroupMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupStrategyArgs', 'Mk8sV1alpha1NodeGroupStrategyArgsDict']]] = None,
                 template: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupTemplateArgs', 'Mk8sV1alpha1NodeGroupTemplateArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Mk8sV1alpha1NodeGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['Mk8sV1alpha1NodeGroupAutoscalingArgs', 'Mk8sV1alpha1NodeGroupAutoscalingArgsDict']] autoscaling: *Cannot be set alongside fixed_node_count.*
        :param pulumi.Input[float] fixed_node_count: number of nodes in the group *Cannot be set alongside autoscaling.*
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['Mk8sV1alpha1NodeGroupMetadataArgs', 'Mk8sV1alpha1NodeGroupMetadataArgsDict']] metadata: ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[str] version: Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
               Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
               used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Mk8sV1alpha1NodeGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Mk8sV1alpha1NodeGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Mk8sV1alpha1NodeGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Mk8sV1alpha1NodeGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autoscaling: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupAutoscalingArgs', 'Mk8sV1alpha1NodeGroupAutoscalingArgsDict']]] = None,
                 fixed_node_count: Optional[pulumi.Input[float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupMetadataArgs', 'Mk8sV1alpha1NodeGroupMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupStrategyArgs', 'Mk8sV1alpha1NodeGroupStrategyArgsDict']]] = None,
                 template: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupTemplateArgs', 'Mk8sV1alpha1NodeGroupTemplateArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Mk8sV1alpha1NodeGroupArgs.__new__(Mk8sV1alpha1NodeGroupArgs)

            __props__.__dict__["autoscaling"] = autoscaling
            __props__.__dict__["fixed_node_count"] = fixed_node_count
            __props__.__dict__["labels"] = labels
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if parent_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_id'")
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["strategy"] = strategy
            if template is None and not opts.urn:
                raise TypeError("Missing required property 'template'")
            __props__.__dict__["template"] = template
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(Mk8sV1alpha1NodeGroup, __self__).__init__(
            'nebius:index/mk8sV1alpha1NodeGroup:Mk8sV1alpha1NodeGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            autoscaling: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupAutoscalingArgs', 'Mk8sV1alpha1NodeGroupAutoscalingArgsDict']]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            fixed_node_count: Optional[pulumi.Input[float]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupMetadataArgs', 'Mk8sV1alpha1NodeGroupMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            resource_version: Optional[pulumi.Input[float]] = None,
            status: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupStatusArgs', 'Mk8sV1alpha1NodeGroupStatusArgsDict']]] = None,
            strategy: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupStrategyArgs', 'Mk8sV1alpha1NodeGroupStrategyArgsDict']]] = None,
            template: Optional[pulumi.Input[Union['Mk8sV1alpha1NodeGroupTemplateArgs', 'Mk8sV1alpha1NodeGroupTemplateArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Mk8sV1alpha1NodeGroup':
        """
        Get an existing Mk8sV1alpha1NodeGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['Mk8sV1alpha1NodeGroupAutoscalingArgs', 'Mk8sV1alpha1NodeGroupAutoscalingArgsDict']] autoscaling: *Cannot be set alongside fixed_node_count.*
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[float] fixed_node_count: number of nodes in the group *Cannot be set alongside autoscaling.*
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['Mk8sV1alpha1NodeGroupMetadataArgs', 'Mk8sV1alpha1NodeGroupMetadataArgsDict']] metadata: ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[str] version: Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
               Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
               used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Mk8sV1alpha1NodeGroupState.__new__(_Mk8sV1alpha1NodeGroupState)

        __props__.__dict__["autoscaling"] = autoscaling
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["fixed_node_count"] = fixed_node_count
        __props__.__dict__["labels"] = labels
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["status"] = status
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["template"] = template
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return Mk8sV1alpha1NodeGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Output[Optional['outputs.Mk8sV1alpha1NodeGroupAutoscaling']]:
        """
        *Cannot be set alongside fixed_node_count.*
        """
        return pulumi.get(self, "autoscaling")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="fixedNodeCount")
    def fixed_node_count(self) -> pulumi.Output[Optional[float]]:
        """
        number of nodes in the group *Cannot be set alongside autoscaling.*
        """
        return pulumi.get(self, "fixed_node_count")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.Mk8sV1alpha1NodeGroupMetadata']:
        """
        ### Inner value description Common resource metadata. the parent_id is an ID of Cluster
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[float]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.Mk8sV1alpha1NodeGroupStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[Optional['outputs.Mk8sV1alpha1NodeGroupStrategy']]:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output['outputs.Mk8sV1alpha1NodeGroupTemplate']:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        """
        Version is desired Kubernetes version of the cluster. For now only acceptable format is `MAJOR.MINOR` like "1.30".
        Option for patch version update will be added later. By default the cluster control plane MAJOR.MINOR version will be
        used.
        """
        return pulumi.get(self, "version")

