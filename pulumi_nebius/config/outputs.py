# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AddressOptions',
    'AddressTemplate',
    'Profile',
    'ServiceAccount',
]

@pulumi.output_type
class AddressOptions(dict):
    def __init__(__self__, *,
                 insecure: Optional[_builtins.bool] = None,
                 no_tls_verify: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool insecure: use plain http connection
        :param _builtins.bool no_tls_verify: don't verify TLS certificates
        """
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if no_tls_verify is not None:
            pulumi.set(__self__, "no_tls_verify", no_tls_verify)

    @_builtins.property
    @pulumi.getter
    def insecure(self) -> Optional[_builtins.bool]:
        """
        use plain http connection
        """
        return pulumi.get(self, "insecure")

    @_builtins.property
    @pulumi.getter(name="noTlsVerify")
    def no_tls_verify(self) -> Optional[_builtins.bool]:
        """
        don't verify TLS certificates
        """
        return pulumi.get(self, "no_tls_verify")


@pulumi.output_type
class AddressTemplate(dict):
    def __init__(__self__, *,
                 find: _builtins.str,
                 replace: _builtins.str):
        pulumi.set(__self__, "find", find)
        pulumi.set(__self__, "replace", replace)

    @_builtins.property
    @pulumi.getter
    def find(self) -> _builtins.str:
        return pulumi.get(self, "find")

    @_builtins.property
    @pulumi.getter
    def replace(self) -> _builtins.str:
        return pulumi.get(self, "replace")


@pulumi.output_type
class Profile(dict):
    def __init__(__self__, *,
                 cache_file: Optional[_builtins.str] = None,
                 client_id: Optional[_builtins.str] = None,
                 config_file: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 no_browser_open: Optional[_builtins.bool] = None):
        """
        :param _builtins.str cache_file: File path to cache the token in, defaults to `~/.nebius//credentials.yaml`
        :param _builtins.str config_file: File path to cache the token in, defaults to `~/.nebius//config.yaml`
        :param _builtins.str name: Profile name to use, uses the default profile if not set.
        :param _builtins.bool no_browser_open: If set to true, the provider will not open a browser window for federation authentication, only showing the URL through the logger.
        """
        if cache_file is not None:
            pulumi.set(__self__, "cache_file", cache_file)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_browser_open is not None:
            pulumi.set(__self__, "no_browser_open", no_browser_open)

    @_builtins.property
    @pulumi.getter(name="cacheFile")
    def cache_file(self) -> Optional[_builtins.str]:
        """
        File path to cache the token in, defaults to `~/.nebius//credentials.yaml`
        """
        return pulumi.get(self, "cache_file")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[_builtins.str]:
        """
        File path to cache the token in, defaults to `~/.nebius//config.yaml`
        """
        return pulumi.get(self, "config_file")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Profile name to use, uses the default profile if not set.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="noBrowserOpen")
    def no_browser_open(self) -> Optional[_builtins.bool]:
        """
        If set to true, the provider will not open a browser window for federation authentication, only showing the URL through the logger.
        """
        return pulumi.get(self, "no_browser_open")


@pulumi.output_type
class ServiceAccount(dict):
    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 account_id_env: Optional[_builtins.str] = None,
                 credentials_file: Optional[_builtins.str] = None,
                 credentials_file_env: Optional[_builtins.str] = None,
                 private_key: Optional[_builtins.str] = None,
                 private_key_file: Optional[_builtins.str] = None,
                 private_key_file_env: Optional[_builtins.str] = None,
                 public_key_id: Optional[_builtins.str] = None,
                 public_key_id_env: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: service account ID (overrides account_id_env)
        :param _builtins.str account_id_env: env var containing service account ID
        :param _builtins.str credentials_file: file path of the service account credentials file (overrides credentials_file_env)
               You can set this file instead of other parameters here, it will silently override them.
        :param _builtins.str credentials_file_env: env var containing file path of the service account credentials, same as credentials_file
        :param _builtins.str private_key: private key (overrides private_key_file and private_key_file_env)
        :param _builtins.str private_key_file: file path of the service account private key (overrides private_key_file_env)
        :param _builtins.str private_key_file_env: env var containing file path of the service account private key
        :param _builtins.str public_key_id: service account public key ID (overrides public_key_id_env)
        :param _builtins.str public_key_id_env: env var containing service account public key ID
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_id_env is not None:
            pulumi.set(__self__, "account_id_env", account_id_env)
        if credentials_file is not None:
            pulumi.set(__self__, "credentials_file", credentials_file)
        if credentials_file_env is not None:
            pulumi.set(__self__, "credentials_file_env", credentials_file_env)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_file is not None:
            pulumi.set(__self__, "private_key_file", private_key_file)
        if private_key_file_env is not None:
            pulumi.set(__self__, "private_key_file_env", private_key_file_env)
        if public_key_id is not None:
            pulumi.set(__self__, "public_key_id", public_key_id)
        if public_key_id_env is not None:
            pulumi.set(__self__, "public_key_id_env", public_key_id_env)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        service account ID (overrides account_id_env)
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountIdEnv")
    def account_id_env(self) -> Optional[_builtins.str]:
        """
        env var containing service account ID
        """
        return pulumi.get(self, "account_id_env")

    @_builtins.property
    @pulumi.getter(name="credentialsFile")
    def credentials_file(self) -> Optional[_builtins.str]:
        """
        file path of the service account credentials file (overrides credentials_file_env)
        You can set this file instead of other parameters here, it will silently override them.
        """
        return pulumi.get(self, "credentials_file")

    @_builtins.property
    @pulumi.getter(name="credentialsFileEnv")
    def credentials_file_env(self) -> Optional[_builtins.str]:
        """
        env var containing file path of the service account credentials, same as credentials_file
        """
        return pulumi.get(self, "credentials_file_env")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        """
        private key (overrides private_key_file and private_key_file_env)
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> Optional[_builtins.str]:
        """
        file path of the service account private key (overrides private_key_file_env)
        """
        return pulumi.get(self, "private_key_file")

    @_builtins.property
    @pulumi.getter(name="privateKeyFileEnv")
    def private_key_file_env(self) -> Optional[_builtins.str]:
        """
        env var containing file path of the service account private key
        """
        return pulumi.get(self, "private_key_file_env")

    @_builtins.property
    @pulumi.getter(name="publicKeyId")
    def public_key_id(self) -> Optional[_builtins.str]:
        """
        service account public key ID (overrides public_key_id_env)
        """
        return pulumi.get(self, "public_key_id")

    @_builtins.property
    @pulumi.getter(name="publicKeyIdEnv")
    def public_key_id_env(self) -> Optional[_builtins.str]:
        """
        env var containing service account public key ID
        """
        return pulumi.get(self, "public_key_id_env")


