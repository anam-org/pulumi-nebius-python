# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

import types

__config__ = pulumi.Config('nebius')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def address_options(self) -> Optional[str]:
        """
        Set specific options for each address. Use "\\*" to set them for all addresses at once. Empty options will result in
        default TLS connection for this address, thus overriding "\\*".
        """
        return __config__.get('addressOptions')

    @_builtins.property
    def address_template(self) -> Optional[str]:
        """
        address template (overrides address_template_env)
        """
        return __config__.get('addressTemplate')

    @_builtins.property
    def address_template_env(self) -> Optional[str]:
        """
        env variable name to obtain address template in form of `FIND=REPLACE`
        """
        return __config__.get('addressTemplateEnv')

    @_builtins.property
    def domain(self) -> Optional[str]:
        """
        custom domain name (overrides domain_env)
        """
        return __config__.get('domain')

    @_builtins.property
    def domain_env(self) -> Optional[str]:
        """
        env variable name to obtain custom domain name
        """
        return __config__.get('domainEnv')

    @_builtins.property
    def module_name(self) -> Optional[str]:
        """
        it is suggested to set this value to your module name if the provider is initialized in one, does not affect any
        behaviors
        """
        return __config__.get('moduleName')

    @_builtins.property
    def no_credentials(self) -> Optional[bool]:
        """
        do not authenticate
        """
        return __config__.get_bool('noCredentials')

    @_builtins.property
    def parent_id(self) -> Optional[str]:
        """
        Parent ID if it is not read from the profile, or if you want to overwrite it.
        """
        return __config__.get('parentId')

    @_builtins.property
    def profile(self) -> Optional[str]:
        """
        Reads profile from the CLI config.
        """
        return __config__.get('profile')

    @_builtins.property
    def resolvers(self) -> Optional[str]:
        """
        resolver map of type `[pattern|service_id]->address`
        """
        return __config__.get('resolvers')

    @_builtins.property
    def resolvers_env(self) -> Optional[str]:
        """
        env variable name that holds resolver map (may be set alongside resolvers)
        """
        return __config__.get('resolversEnv')

    @_builtins.property
    def service_account(self) -> Optional[str]:
        """
        sets service account credentials (is overridden by token)
        """
        return __config__.get('serviceAccount')

    @_builtins.property
    def token(self) -> Optional[str]:
        """
        authenticate using this IAM token
        """
        return __config__.get('token')

    @_builtins.property
    def versioned_ephemeral_values(self) -> Optional[str]:
        """
        A map of all ephemeral values that will be passed to nebius.Hash for hashing
        """
        return __config__.get('versionedEphemeralValues')

