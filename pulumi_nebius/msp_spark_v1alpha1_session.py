# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MspSparkV1alpha1SessionArgs', 'MspSparkV1alpha1Session']

@pulumi.input_type
class MspSparkV1alpha1SessionArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input['MspSparkV1alpha1SessionDriverArgs'],
                 executor: pulumi.Input['MspSparkV1alpha1SessionExecutorArgs'],
                 parent_id: pulumi.Input[str],
                 spark_version: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 file_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jar_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 python: Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']] = None,
                 spark_conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a MspSparkV1alpha1Session resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[str] description: Description of the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_uris: S3 URIs of files to be placed in executor working directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jar_uris: S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['MspSparkV1alpha1SessionMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: List of maven coordinates of jars to include on the driver and executor classpaths
        :param pulumi.Input['MspSparkV1alpha1SessionPythonArgs'] python: Python runtime-specific session config
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_conf: Map of spark configuration parameters
        """
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "executor", executor)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "spark_version", spark_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_uris is not None:
            pulumi.set(__self__, "file_uris", file_uris)
        if jar_uris is not None:
            pulumi.set(__self__, "jar_uris", jar_uris)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if python is not None:
            pulumi.set(__self__, "python", python)
        if spark_conf is not None:
            pulumi.set(__self__, "spark_conf", spark_conf)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input['MspSparkV1alpha1SessionDriverArgs']:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input['MspSparkV1alpha1SessionDriverArgs']):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Input['MspSparkV1alpha1SessionExecutorArgs']:
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: pulumi.Input['MspSparkV1alpha1SessionExecutorArgs']):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Input[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "spark_version")

    @spark_version.setter
    def spark_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "spark_version", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the session.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileUris")
    def file_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        S3 URIs of files to be placed in executor working directory
        """
        return pulumi.get(self, "file_uris")

    @file_uris.setter
    def file_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_uris", value)

    @property
    @pulumi.getter(name="jarUris")
    def jar_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        """
        return pulumi.get(self, "jar_uris")

    @jar_uris.setter
    def jar_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jar_uris", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of maven coordinates of jars to include on the driver and executor classpaths
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def python(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']]:
        """
        Python runtime-specific session config
        """
        return pulumi.get(self, "python")

    @python.setter
    def python(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']]):
        pulumi.set(self, "python", value)

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of spark configuration parameters
        """
        return pulumi.get(self, "spark_conf")

    @spark_conf.setter
    def spark_conf(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "spark_conf", value)


@pulumi.input_type
class _MspSparkV1alpha1SessionState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 driver: Optional[pulumi.Input['MspSparkV1alpha1SessionDriverArgs']] = None,
                 executor: Optional[pulumi.Input['MspSparkV1alpha1SessionExecutorArgs']] = None,
                 file_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jar_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 python: Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']] = None,
                 resource_version: Optional[pulumi.Input[float]] = None,
                 spark_conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 spark_version: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['MspSparkV1alpha1SessionStatusArgs']] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MspSparkV1alpha1Session resources.
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[str] description: Description of the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_uris: S3 URIs of files to be placed in executor working directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jar_uris: S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['MspSparkV1alpha1SessionMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: List of maven coordinates of jars to include on the driver and executor classpaths
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input['MspSparkV1alpha1SessionPythonArgs'] python: Python runtime-specific session config
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_conf: Map of spark configuration parameters
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if executor is not None:
            pulumi.set(__self__, "executor", executor)
        if file_uris is not None:
            pulumi.set(__self__, "file_uris", file_uris)
        if jar_uris is not None:
            pulumi.set(__self__, "jar_uris", jar_uris)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if python is not None:
            pulumi.set(__self__, "python", python)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if spark_conf is not None:
            pulumi.set(__self__, "spark_conf", spark_conf)
        if spark_version is not None:
            pulumi.set(__self__, "spark_version", spark_version)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the session.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionDriverArgs']]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionDriverArgs']]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def executor(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionExecutorArgs']]:
        return pulumi.get(self, "executor")

    @executor.setter
    def executor(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionExecutorArgs']]):
        pulumi.set(self, "executor", value)

    @property
    @pulumi.getter(name="fileUris")
    def file_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        S3 URIs of files to be placed in executor working directory
        """
        return pulumi.get(self, "file_uris")

    @file_uris.setter
    def file_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_uris", value)

    @property
    @pulumi.getter(name="jarUris")
    def jar_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        """
        return pulumi.get(self, "jar_uris")

    @jar_uris.setter
    def jar_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jar_uris", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of maven coordinates of jars to include on the driver and executor classpaths
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def python(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']]:
        """
        Python runtime-specific session config
        """
        return pulumi.get(self, "python")

    @python.setter
    def python(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionPythonArgs']]):
        pulumi.set(self, "python", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[float]]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of spark configuration parameters
        """
        return pulumi.get(self, "spark_conf")

    @spark_conf.setter
    def spark_conf(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "spark_conf", value)

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spark_version")

    @spark_version.setter
    def spark_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spark_version", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MspSparkV1alpha1SessionStatusArgs']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MspSparkV1alpha1SessionStatusArgs']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class MspSparkV1alpha1Session(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 driver: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionDriverArgs', 'MspSparkV1alpha1SessionDriverArgsDict']]] = None,
                 executor: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionExecutorArgs', 'MspSparkV1alpha1SessionExecutorArgsDict']]] = None,
                 file_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jar_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionMetadataArgs', 'MspSparkV1alpha1SessionMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 python: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionPythonArgs', 'MspSparkV1alpha1SessionPythonArgsDict']]] = None,
                 spark_conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 spark_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MspSparkV1alpha1Session resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_uris: S3 URIs of files to be placed in executor working directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jar_uris: S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['MspSparkV1alpha1SessionMetadataArgs', 'MspSparkV1alpha1SessionMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: List of maven coordinates of jars to include on the driver and executor classpaths
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[Union['MspSparkV1alpha1SessionPythonArgs', 'MspSparkV1alpha1SessionPythonArgsDict']] python: Python runtime-specific session config
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_conf: Map of spark configuration parameters
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MspSparkV1alpha1SessionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MspSparkV1alpha1Session resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MspSparkV1alpha1SessionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MspSparkV1alpha1SessionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 driver: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionDriverArgs', 'MspSparkV1alpha1SessionDriverArgsDict']]] = None,
                 executor: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionExecutorArgs', 'MspSparkV1alpha1SessionExecutorArgsDict']]] = None,
                 file_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jar_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionMetadataArgs', 'MspSparkV1alpha1SessionMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 python: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionPythonArgs', 'MspSparkV1alpha1SessionPythonArgsDict']]] = None,
                 spark_conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 spark_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MspSparkV1alpha1SessionArgs.__new__(MspSparkV1alpha1SessionArgs)

            __props__.__dict__["description"] = description
            if driver is None and not opts.urn:
                raise TypeError("Missing required property 'driver'")
            __props__.__dict__["driver"] = driver
            if executor is None and not opts.urn:
                raise TypeError("Missing required property 'executor'")
            __props__.__dict__["executor"] = executor
            __props__.__dict__["file_uris"] = file_uris
            __props__.__dict__["jar_uris"] = jar_uris
            __props__.__dict__["labels"] = labels
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["packages"] = packages
            if parent_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_id'")
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["python"] = python
            __props__.__dict__["spark_conf"] = spark_conf
            if spark_version is None and not opts.urn:
                raise TypeError("Missing required property 'spark_version'")
            __props__.__dict__["spark_version"] = spark_version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(MspSparkV1alpha1Session, __self__).__init__(
            'nebius:index/mspSparkV1alpha1Session:MspSparkV1alpha1Session',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            driver: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionDriverArgs', 'MspSparkV1alpha1SessionDriverArgsDict']]] = None,
            executor: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionExecutorArgs', 'MspSparkV1alpha1SessionExecutorArgsDict']]] = None,
            file_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            jar_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionMetadataArgs', 'MspSparkV1alpha1SessionMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            packages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            python: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionPythonArgs', 'MspSparkV1alpha1SessionPythonArgsDict']]] = None,
            resource_version: Optional[pulumi.Input[float]] = None,
            spark_conf: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            spark_version: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[Union['MspSparkV1alpha1SessionStatusArgs', 'MspSparkV1alpha1SessionStatusArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'MspSparkV1alpha1Session':
        """
        Get an existing MspSparkV1alpha1Session resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        :param pulumi.Input[str] description: Description of the session.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_uris: S3 URIs of files to be placed in executor working directory
        :param pulumi.Input[Sequence[pulumi.Input[str]]] jar_uris: S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['MspSparkV1alpha1SessionMetadataArgs', 'MspSparkV1alpha1SessionMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] packages: List of maven coordinates of jars to include on the driver and executor classpaths
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[Union['MspSparkV1alpha1SessionPythonArgs', 'MspSparkV1alpha1SessionPythonArgsDict']] python: Python runtime-specific session config
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] spark_conf: Map of spark configuration parameters
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MspSparkV1alpha1SessionState.__new__(_MspSparkV1alpha1SessionState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["driver"] = driver
        __props__.__dict__["executor"] = executor
        __props__.__dict__["file_uris"] = file_uris
        __props__.__dict__["jar_uris"] = jar_uris
        __props__.__dict__["labels"] = labels
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["packages"] = packages
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["python"] = python
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["spark_conf"] = spark_conf
        __props__.__dict__["spark_version"] = spark_version
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        return MspSparkV1alpha1Session(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the session.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Output['outputs.MspSparkV1alpha1SessionDriver']:
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def executor(self) -> pulumi.Output['outputs.MspSparkV1alpha1SessionExecutor']:
        return pulumi.get(self, "executor")

    @property
    @pulumi.getter(name="fileUris")
    def file_uris(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        S3 URIs of files to be placed in executor working directory
        """
        return pulumi.get(self, "file_uris")

    @property
    @pulumi.getter(name="jarUris")
    def jar_uris(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        S3 URIs of Jars to be placed in classpaths of driver and executors for java applications
        """
        return pulumi.get(self, "jar_uris")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.MspSparkV1alpha1SessionMetadata']:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of maven coordinates of jars to include on the driver and executor classpaths
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def python(self) -> pulumi.Output[Optional['outputs.MspSparkV1alpha1SessionPython']]:
        """
        Python runtime-specific session config
        """
        return pulumi.get(self, "python")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[float]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter(name="sparkConf")
    def spark_conf(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of spark configuration parameters
        """
        return pulumi.get(self, "spark_conf")

    @property
    @pulumi.getter(name="sparkVersion")
    def spark_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "spark_version")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.MspSparkV1alpha1SessionStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSS±HH:MM`
        """
        return pulumi.get(self, "updated_at")

