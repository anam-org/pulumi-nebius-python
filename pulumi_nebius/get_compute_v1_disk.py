# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetComputeV1DiskResult',
    'AwaitableGetComputeV1DiskResult',
    'get_compute_v1_disk',
    'get_compute_v1_disk_output',
]

@pulumi.output_type
class GetComputeV1DiskResult:
    """
    A collection of values returned by getComputeV1Disk.
    """
    def __init__(__self__, block_size_bytes=None, created_at=None, disk_encryption=None, id=None, labels=None, metadata=None, name=None, parent_id=None, resource_version=None, size_bytes=None, size_gibibytes=None, size_kibibytes=None, size_mebibytes=None, source_image_family=None, source_image_id=None, status=None, type=None, updated_at=None):
        if block_size_bytes and not isinstance(block_size_bytes, float):
            raise TypeError("Expected argument 'block_size_bytes' to be a float")
        pulumi.set(__self__, "block_size_bytes", block_size_bytes)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if disk_encryption and not isinstance(disk_encryption, dict):
            raise TypeError("Expected argument 'disk_encryption' to be a dict")
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if resource_version and not isinstance(resource_version, float):
            raise TypeError("Expected argument 'resource_version' to be a float")
        pulumi.set(__self__, "resource_version", resource_version)
        if size_bytes and not isinstance(size_bytes, float):
            raise TypeError("Expected argument 'size_bytes' to be a float")
        pulumi.set(__self__, "size_bytes", size_bytes)
        if size_gibibytes and not isinstance(size_gibibytes, float):
            raise TypeError("Expected argument 'size_gibibytes' to be a float")
        pulumi.set(__self__, "size_gibibytes", size_gibibytes)
        if size_kibibytes and not isinstance(size_kibibytes, float):
            raise TypeError("Expected argument 'size_kibibytes' to be a float")
        pulumi.set(__self__, "size_kibibytes", size_kibibytes)
        if size_mebibytes and not isinstance(size_mebibytes, float):
            raise TypeError("Expected argument 'size_mebibytes' to be a float")
        pulumi.set(__self__, "size_mebibytes", size_mebibytes)
        if source_image_family and not isinstance(source_image_family, dict):
            raise TypeError("Expected argument 'source_image_family' to be a dict")
        pulumi.set(__self__, "source_image_family", source_image_family)
        if source_image_id and not isinstance(source_image_id, str):
            raise TypeError("Expected argument 'source_image_id' to be a str")
        pulumi.set(__self__, "source_image_id", source_image_id)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="blockSizeBytes")
    def block_size_bytes(self) -> _builtins.float:
        return pulumi.get(self, "block_size_bytes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> 'outputs.GetComputeV1DiskDiskEncryptionResult':
        return pulumi.get(self, "disk_encryption")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetComputeV1DiskMetadataResult':
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> _builtins.float:
        return pulumi.get(self, "resource_version")

    @_builtins.property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> _builtins.float:
        return pulumi.get(self, "size_bytes")

    @_builtins.property
    @pulumi.getter(name="sizeGibibytes")
    def size_gibibytes(self) -> _builtins.float:
        return pulumi.get(self, "size_gibibytes")

    @_builtins.property
    @pulumi.getter(name="sizeKibibytes")
    def size_kibibytes(self) -> _builtins.float:
        return pulumi.get(self, "size_kibibytes")

    @_builtins.property
    @pulumi.getter(name="sizeMebibytes")
    def size_mebibytes(self) -> _builtins.float:
        return pulumi.get(self, "size_mebibytes")

    @_builtins.property
    @pulumi.getter(name="sourceImageFamily")
    def source_image_family(self) -> 'outputs.GetComputeV1DiskSourceImageFamilyResult':
        return pulumi.get(self, "source_image_family")

    @_builtins.property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> _builtins.str:
        return pulumi.get(self, "source_image_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetComputeV1DiskStatusResult':
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetComputeV1DiskResult(GetComputeV1DiskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeV1DiskResult(
            block_size_bytes=self.block_size_bytes,
            created_at=self.created_at,
            disk_encryption=self.disk_encryption,
            id=self.id,
            labels=self.labels,
            metadata=self.metadata,
            name=self.name,
            parent_id=self.parent_id,
            resource_version=self.resource_version,
            size_bytes=self.size_bytes,
            size_gibibytes=self.size_gibibytes,
            size_kibibytes=self.size_kibibytes,
            size_mebibytes=self.size_mebibytes,
            source_image_family=self.source_image_family,
            source_image_id=self.source_image_id,
            status=self.status,
            type=self.type,
            updated_at=self.updated_at)


def get_compute_v1_disk(id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        parent_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeV1DiskResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['parentId'] = parent_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nebius:index/getComputeV1Disk:getComputeV1Disk', __args__, opts=opts, typ=GetComputeV1DiskResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeV1DiskResult(
        block_size_bytes=pulumi.get(__ret__, 'block_size_bytes'),
        created_at=pulumi.get(__ret__, 'created_at'),
        disk_encryption=pulumi.get(__ret__, 'disk_encryption'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        resource_version=pulumi.get(__ret__, 'resource_version'),
        size_bytes=pulumi.get(__ret__, 'size_bytes'),
        size_gibibytes=pulumi.get(__ret__, 'size_gibibytes'),
        size_kibibytes=pulumi.get(__ret__, 'size_kibibytes'),
        size_mebibytes=pulumi.get(__ret__, 'size_mebibytes'),
        source_image_family=pulumi.get(__ret__, 'source_image_family'),
        source_image_id=pulumi.get(__ret__, 'source_image_id'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_compute_v1_disk_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               parent_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeV1DiskResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['parentId'] = parent_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nebius:index/getComputeV1Disk:getComputeV1Disk', __args__, opts=opts, typ=GetComputeV1DiskResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeV1DiskResult(
        block_size_bytes=pulumi.get(__response__, 'block_size_bytes'),
        created_at=pulumi.get(__response__, 'created_at'),
        disk_encryption=pulumi.get(__response__, 'disk_encryption'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        resource_version=pulumi.get(__response__, 'resource_version'),
        size_bytes=pulumi.get(__response__, 'size_bytes'),
        size_gibibytes=pulumi.get(__response__, 'size_gibibytes'),
        size_kibibytes=pulumi.get(__response__, 'size_kibibytes'),
        size_mebibytes=pulumi.get(__response__, 'size_mebibytes'),
        source_image_family=pulumi.get(__response__, 'source_image_family'),
        source_image_id=pulumi.get(__response__, 'source_image_id'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
