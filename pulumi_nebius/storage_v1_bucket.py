# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StorageV1BucketArgs', 'StorageV1Bucket']

@pulumi.input_type
class StorageV1BucketArgs:
    def __init__(__self__, *,
                 parent_id: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lifecycle_configuration: Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']] = None,
                 max_size_bytes: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input['StorageV1BucketMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 versioning_policy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StorageV1Bucket resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['StorageV1BucketLifecycleConfigurationArgs'] lifecycle_configuration: ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
               have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
               rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
               indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
               performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
               versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
               same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
               can specify for current and noncurrent object versions.
        :param pulumi.Input[float] max_size_bytes: Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
               size can go a little higher if customer writes too fast.
        :param pulumi.Input['StorageV1BucketMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] versioning_policy: Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
               values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        pulumi.set(__self__, "parent_id", parent_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lifecycle_configuration is not None:
            pulumi.set(__self__, "lifecycle_configuration", lifecycle_configuration)
        if max_size_bytes is not None:
            pulumi.set(__self__, "max_size_bytes", max_size_bytes)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if versioning_policy is not None:
            pulumi.set(__self__, "versioning_policy", versioning_policy)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Input[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lifecycleConfiguration")
    def lifecycle_configuration(self) -> Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']]:
        """
        ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
        have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
        rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
        indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
        performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
        versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
        same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
        can specify for current and noncurrent object versions.
        """
        return pulumi.get(self, "lifecycle_configuration")

    @lifecycle_configuration.setter
    def lifecycle_configuration(self, value: Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']]):
        pulumi.set(self, "lifecycle_configuration", value)

    @property
    @pulumi.getter(name="maxSizeBytes")
    def max_size_bytes(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
        size can go a little higher if customer writes too fast.
        """
        return pulumi.get(self, "max_size_bytes")

    @max_size_bytes.setter
    def max_size_bytes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_size_bytes", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['StorageV1BucketMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['StorageV1BucketMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="versioningPolicy")
    def versioning_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
        values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        return pulumi.get(self, "versioning_policy")

    @versioning_policy.setter
    def versioning_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versioning_policy", value)


@pulumi.input_type
class _StorageV1BucketState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lifecycle_configuration: Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']] = None,
                 max_size_bytes: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input['StorageV1BucketMetadataArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input['StorageV1BucketStatusArgs']] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 versioning_policy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StorageV1Bucket resources.
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input['StorageV1BucketLifecycleConfigurationArgs'] lifecycle_configuration: ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
               have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
               rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
               indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
               performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
               versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
               same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
               can specify for current and noncurrent object versions.
        :param pulumi.Input[float] max_size_bytes: Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
               size can go a little higher if customer writes too fast.
        :param pulumi.Input['StorageV1BucketMetadataArgs'] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        :param pulumi.Input[str] versioning_policy: Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
               values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lifecycle_configuration is not None:
            pulumi.set(__self__, "lifecycle_configuration", lifecycle_configuration)
        if max_size_bytes is not None:
            pulumi.set(__self__, "max_size_bytes", max_size_bytes)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if versioning_policy is not None:
            pulumi.set(__self__, "versioning_policy", versioning_policy)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lifecycleConfiguration")
    def lifecycle_configuration(self) -> Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']]:
        """
        ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
        have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
        rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
        indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
        performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
        versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
        same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
        can specify for current and noncurrent object versions.
        """
        return pulumi.get(self, "lifecycle_configuration")

    @lifecycle_configuration.setter
    def lifecycle_configuration(self, value: Optional[pulumi.Input['StorageV1BucketLifecycleConfigurationArgs']]):
        pulumi.set(self, "lifecycle_configuration", value)

    @property
    @pulumi.getter(name="maxSizeBytes")
    def max_size_bytes(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
        size can go a little higher if customer writes too fast.
        """
        return pulumi.get(self, "max_size_bytes")

    @max_size_bytes.setter
    def max_size_bytes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_size_bytes", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['StorageV1BucketMetadataArgs']]:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['StorageV1BucketMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[float]]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['StorageV1BucketStatusArgs']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['StorageV1BucketStatusArgs']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="versioningPolicy")
    def versioning_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
        values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        return pulumi.get(self, "versioning_policy")

    @versioning_policy.setter
    def versioning_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versioning_policy", value)


class StorageV1Bucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lifecycle_configuration: Optional[pulumi.Input[Union['StorageV1BucketLifecycleConfigurationArgs', 'StorageV1BucketLifecycleConfigurationArgsDict']]] = None,
                 max_size_bytes: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Union['StorageV1BucketMetadataArgs', 'StorageV1BucketMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 versioning_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StorageV1Bucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['StorageV1BucketLifecycleConfigurationArgs', 'StorageV1BucketLifecycleConfigurationArgsDict']] lifecycle_configuration: ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
               have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
               rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
               indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
               performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
               versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
               same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
               can specify for current and noncurrent object versions.
        :param pulumi.Input[float] max_size_bytes: Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
               size can go a little higher if customer writes too fast.
        :param pulumi.Input[Union['StorageV1BucketMetadataArgs', 'StorageV1BucketMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[str] versioning_policy: Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
               values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StorageV1BucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StorageV1Bucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StorageV1BucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageV1BucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lifecycle_configuration: Optional[pulumi.Input[Union['StorageV1BucketLifecycleConfigurationArgs', 'StorageV1BucketLifecycleConfigurationArgsDict']]] = None,
                 max_size_bytes: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input[Union['StorageV1BucketMetadataArgs', 'StorageV1BucketMetadataArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 versioning_policy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageV1BucketArgs.__new__(StorageV1BucketArgs)

            __props__.__dict__["labels"] = labels
            __props__.__dict__["lifecycle_configuration"] = lifecycle_configuration
            __props__.__dict__["max_size_bytes"] = max_size_bytes
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if parent_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_id'")
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["versioning_policy"] = versioning_policy
            __props__.__dict__["created_at"] = None
            __props__.__dict__["resource_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(StorageV1Bucket, __self__).__init__(
            'nebius:index/storageV1Bucket:StorageV1Bucket',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            lifecycle_configuration: Optional[pulumi.Input[Union['StorageV1BucketLifecycleConfigurationArgs', 'StorageV1BucketLifecycleConfigurationArgsDict']]] = None,
            max_size_bytes: Optional[pulumi.Input[float]] = None,
            metadata: Optional[pulumi.Input[Union['StorageV1BucketMetadataArgs', 'StorageV1BucketMetadataArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            resource_version: Optional[pulumi.Input[float]] = None,
            status: Optional[pulumi.Input[Union['StorageV1BucketStatusArgs', 'StorageV1BucketStatusArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            versioning_policy: Optional[pulumi.Input[str]] = None) -> 'StorageV1Bucket':
        """
        Get an existing StorageV1Bucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels associated with the resource.
        :param pulumi.Input[Union['StorageV1BucketLifecycleConfigurationArgs', 'StorageV1BucketLifecycleConfigurationArgsDict']] lifecycle_configuration: ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
               have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
               rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
               indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
               performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
               versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
               same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
               can specify for current and noncurrent object versions.
        :param pulumi.Input[float] max_size_bytes: Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
               size can go a little higher if customer writes too fast.
        :param pulumi.Input[Union['StorageV1BucketMetadataArgs', 'StorageV1BucketMetadataArgsDict']] metadata: ### Inner value description Common resource metadata.
        :param pulumi.Input[str] name: Human readable name for the resource.
        :param pulumi.Input[str] parent_id: Identifier of the parent resource to which the resource belongs.
        :param pulumi.Input[float] resource_version: Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
               each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
               or current.
        :param pulumi.Input[str] updated_at: Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
               8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        :param pulumi.Input[str] versioning_policy: Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
               values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StorageV1BucketState.__new__(_StorageV1BucketState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["labels"] = labels
        __props__.__dict__["lifecycle_configuration"] = lifecycle_configuration
        __props__.__dict__["max_size_bytes"] = max_size_bytes
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["resource_version"] = resource_version
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["versioning_policy"] = versioning_policy
        return StorageV1Bucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was created. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels associated with the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lifecycleConfiguration")
    def lifecycle_configuration(self) -> pulumi.Output['outputs.StorageV1BucketLifecycleConfiguration']:
        """
        ### Inner value description The lifecycle configuration consists of one or more rules. An Lifecycle configuration can
        have up to 1,000 rules. Each rule consists of the following: - A filter identifying a subset of objects to which the
        rule applies. The filter can be based on a key name prefix, object size, or any combination of these. - A status
        indicating whether the rule is currently active. - One or more lifecycle expiration actions that you want to be
        performed on the objects identified by the filter. If the state of your bucket is versioning-enabled or
        versioning-suspended (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the
        same object (one current version and zero or more noncurrent versions). The system provides predefined actions that you
        can specify for current and noncurrent object versions.
        """
        return pulumi.get(self, "lifecycle_configuration")

    @property
    @pulumi.getter(name="maxSizeBytes")
    def max_size_bytes(self) -> pulumi.Output[Optional[float]]:
        """
        Maximum bucket size. Zero means unlimited. Actual limit can be lower if customer doesn't have enough quota. Real bucket
        size can go a little higher if customer writes too fast.
        """
        return pulumi.get(self, "max_size_bytes")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.StorageV1BucketMetadata']:
        """
        ### Inner value description Common resource metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human readable name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        """
        Identifier of the parent resource to which the resource belongs.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> pulumi.Output[float]:
        """
        Version of the resource for safe concurrent modifications and consistent reads. Positive and monotonically increases on
        each resource spec change (but *not* on each change of the resource's container(s) or status). Service allows zero value
        or current.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['outputs.StorageV1BucketStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Timestamp indicating when the resource was last updated. A string representing a timestamp in [ISO
        8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ` or `YYYY-MM-DDTHH:MM:SS.SSSÂ±HH:MM`
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="versioningPolicy")
    def versioning_policy(self) -> pulumi.Output[str]:
        """
        Supports transitions: * disabled > enabled * disabled > suspended * enabled <> suspended ### Supported values Possible
        values: - `VERSIONING_POLICY_UNSPECIFIED` - `DISABLED` - `ENABLED` - `SUSPENDED`
        """
        return pulumi.get(self, "versioning_policy")

